{"version":3,"file":"static/js/411.2434eb6b.chunk.js","mappings":"wLAIA,MA0EA,GAAeA,EAAAA,EAAAA,KAJUC,IAAK,CAC5BC,OAAQD,EAAME,OAAOD,UAGiB,CAAEE,WAAW,KAArD,EA1EcC,IAA6B,IAA5B,OAAEH,EAAM,WAAEE,GAAYC,EACnC,MAAOC,EAAgBC,IAAqBC,EAAAA,EAAAA,UAAS,KAC9CC,EAAgBC,IAAqBF,EAAAA,EAAAA,UAAS,QAErDG,EAAAA,EAAAA,YAAU,KACRP,GAAY,GACX,CAACA,KAEJO,EAAAA,EAAAA,YAAU,KAENJ,EADqB,QAAnBE,EACgBP,EAEAA,EAAOU,QAAQC,GAAUA,EAAMC,KAAKC,WAAWN,KACnE,GACC,CAACP,EAAQO,IAEZ,MAAMO,EAAU,kBAAkBC,MAAM,IAExC,OACEC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iBAAgBC,UAC7BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,0CAAyCC,SAAA,EACtDF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,qCAAoCC,UACjDF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,wCAAuCC,SAAC,cAExDC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,mGAAkGC,SAAA,EAC/GF,EAAAA,EAAAA,KAAA,UACEI,QAASA,IAAMZ,EAAkB,OACjCS,UAAW,2CACU,QAAnBV,EAA2B,yBAA2B,6BACrDW,SACJ,UAGAJ,EAAQO,KAAKC,IACZN,EAAAA,EAAAA,KAAA,UAEEI,QAASA,IAAMZ,EAAkBc,GACjCL,UAAW,2CACTV,IAAmBe,EAAS,yBAA2B,kCACtDJ,SAEFI,GANIA,SAYXN,EAAAA,EAAAA,KAAA,OAAKC,UAAU,sEAAqEC,SACjFd,GACCA,EAAeiB,KAAKV,IAClBQ,EAAAA,EAAAA,MAAA,OAEEF,UAAU,yEAAwEC,SAAA,EAElFF,EAAAA,EAAAA,KAAA,OACEO,IAAKZ,EAAMa,KACXC,IAAKd,EAAMC,KACXK,UAAU,4FAEZD,EAAAA,EAAAA,KAAA,OAAKC,UAAU,6IAA4IC,UACzJF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,mCAAkCC,SAAEP,EAAMC,WATvDD,EAAMe,YAejB,IC5DV,QARA,WACE,OACEV,EAAAA,EAAAA,KAACW,EAAAA,EAAM,CAAAT,UACHF,EAAAA,EAAAA,KAACY,EAAY,KAGrB,C,0DCFO,MAAM1B,EAAaA,IAAM2B,UAC5B,MAAMC,EAAS,CACXC,QAAS,CACL,OAAU,qBAIlB,IACI,MAAMC,QAAYC,EAAAA,EAAMC,IAAI,yCAAqDJ,GAE7EE,EAAIG,QAAU,KAAOH,EAAIG,OAAS,IAClCC,EAAS,CACLC,KAAMC,EAAAA,GACNC,QAASP,EAAIQ,QAGjBC,QAAQC,MAAM,oCAAqCV,EAAIG,QACvDC,EAAS,CACLC,KAAMM,EAAAA,KAGlB,CAAE,MAAOC,GACLH,QAAQC,MAAM,yBAA0BE,EAAIC,SAC5CT,EAAS,CACLC,KAAMM,EAAAA,IAEd,E","sources":["containers/pages/products/ProductBrand.jsx","containers/Brands.jsx","redux/actions/brands.js"],"sourcesContent":["import { connect } from \"react-redux\";\r\nimport { get_brands } from \"../../../redux/actions/brands\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst Brand = ({ brands, get_brands }) => {\r\n  const [filteredBrands, setFilteredBrands] = useState([]);\r\n  const [selectedLetter, setSelectedLetter] = useState(\"ALL\");\r\n\r\n  useEffect(() => {\r\n    get_brands();\r\n  }, [get_brands]);\r\n\r\n  useEffect(() => {\r\n    if (selectedLetter === \"ALL\") {\r\n      setFilteredBrands(brands);\r\n    } else {\r\n      setFilteredBrands(brands.filter((brand) => brand.name.startsWith(selectedLetter)));\r\n    }\r\n  }, [brands, selectedLetter]);\r\n\r\n  const letters = \"ACDEFGHILMNOSTV\".split(\"\");\r\n\r\n  return (\r\n    <div className=\"bg-white py-10\">\r\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-32\">\r\n        <div className=\"text-center max-w-2xl mx-auto mb-4\">\r\n          <h1 className=\"text-5xl font-extrabold text-gray-900\">Marcas</h1>\r\n        </div>\r\n        <div className=\"flex flex-wrap justify-center space-x-2 gap-x-1 overflow-x-auto scrollbar-hidden px-2 pb-4 mb-16\">\r\n          <button\r\n            onClick={() => setSelectedLetter(\"ALL\")}\r\n            className={`px-3 py-1 rounded-md whitespace-nowrap ${\r\n              selectedLetter === \"ALL\" ? \"bg-gray-800 text-white\" : \"bg-gray-200 text-gray-800\"\r\n            }`}\r\n          >\r\n            Todas\r\n          </button>\r\n          {letters.map((letter) => (\r\n            <button\r\n              key={letter}\r\n              onClick={() => setSelectedLetter(letter)}\r\n              className={`px-3 py-1 rounded-md whitespace-nowrap ${\r\n                selectedLetter === letter ? \"bg-gray-800 text-white\" : \"bg-gray-200 text-gray-800 mt-5\"\r\n              }`}\r\n            >\r\n              {letter}\r\n            </button>\r\n          ))}\r\n        </div>\r\n\r\n        {/* Marcas */}\r\n        <div className=\"grid grid-cols-3 sm:grid-cols-4 md:grid-cols-5 lg:grid-cols-7 gap-4\">\r\n          {filteredBrands &&\r\n            filteredBrands.map((brand) => (\r\n              <div\r\n                key={brand.id}\r\n                className=\"relative group w-full bg-gray-100 rounded-lg overflow-hidden shadow-lg\"\r\n              >\r\n                <img\r\n                  src={brand.logo}\r\n                  alt={brand.name}\r\n                  className=\"w-full h-16 object-contain p-4 transition-transform duration-300 group-hover:scale-110\"\r\n                />\r\n                <div className=\"absolute inset-0 bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 flex items-center justify-center transition-opacity duration-300\">\r\n                  <span className=\"text-white text-sm font-semibold\">{brand.name}</span>\r\n                </div>\r\n              </div>\r\n            ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  brands: state.Brands.brands,\r\n});\r\n\r\nexport default connect(mapStateToProps, { get_brands })(Brand);\r\n","import Layout from \"../hocs/Layout\"\r\nimport ProductBrand from \"./pages/products/ProductBrand\"\r\nfunction Brands() {\r\n  return (\r\n    <Layout>\r\n        <ProductBrand/>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default Brands","import axios from 'axios';\r\nimport {\r\n    GET_BRANDS_SUCCESS,\r\n    GET_BRANDS_FAIL,\r\n} from './types';\r\n\r\nexport const get_brands = () => async dispatch => {\r\n    const config = {\r\n        headers: {\r\n            'Accept': 'application/json'\r\n        }\r\n    };\r\n\r\n    try {\r\n        const res = await axios.get(`${process.env.REACT_APP_API_URL}/api/brand/brands`, config);\r\n        \r\n        if (res.status >= 200 && res.status < 300) {\r\n            dispatch({\r\n                type: GET_BRANDS_SUCCESS,\r\n                payload: res.data // AsegÃºrate de que tu API devuelva un objeto con `brands`\r\n            });\r\n        } else {\r\n            console.error('Error: Unexpected response status', res.status);\r\n            dispatch({\r\n                type: GET_BRANDS_FAIL\r\n            });\r\n        }\r\n    } catch (err) {\r\n        console.error('Error fetching brands:', err.message);\r\n        dispatch({\r\n            type: GET_BRANDS_FAIL\r\n        });\r\n    }\r\n};\r\n"],"names":["connect","state","brands","Brands","get_brands","_ref","filteredBrands","setFilteredBrands","useState","selectedLetter","setSelectedLetter","useEffect","filter","brand","name","startsWith","letters","split","_jsx","className","children","_jsxs","onClick","map","letter","src","logo","alt","id","Layout","ProductBrand","async","config","headers","res","axios","get","status","dispatch","type","GET_BRANDS_SUCCESS","payload","data","console","error","GET_BRANDS_FAIL","err","message"],"sourceRoot":""}